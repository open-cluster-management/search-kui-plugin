sudo: required
services:
  - docker
  - xvfb

cache:
  apt: true
  directories:
    - "$TRAVIS_CACHE_DIR"

before_cache:
  - sudo rm -rf $TRAVIS_CACHE_DIR/selenium-standalone


branches:
  only:
    - master
    - /^release-[0-9]+\..*$/

env:
  global:
    # Required
    - OS=linux
    - COMPONENT_TAG_EXTENSION="-${TRAVIS_COMMIT}"
    # Component Specific
    - COMPONENT_INIT_COMMAND=${TRAVIS_BUILD_DIR}/build/install-dependencies.sh
    - COMPONENT_BUILD_COMMAND=${TRAVIS_BUILD_DIR}/build/build.sh
    - COMPONENT_UNIT_TEST_COMMAND=${TRAVIS_BUILD_DIR}/build/run-unit-tests.sh
    - COMPONENT_E2E_TEST_COMMAND=${TRAVIS_BUILD_DIR}/build/run-e2e-tests.sh

stages:
  - build
  - unit-test
  - test-e2e
  - publish

before_script:
  - make init


jobs:
  include:
    - stage: build
      name: "Build the test image and push it"
      script:
        - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then export COMPONENT_TAG_EXTENSION="-PR${TRAVIS_PULL_REQUEST}-${TRAVIS_COMMIT}"; fi;
        - make component/build
        # - make component/push
    - stage: unit-test
      name: "Run unit tests"
      if: type = pull_request
      script:
        # Set the image tag differently for PRs
        - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then export COMPONENT_TAG_EXTENSION="-PR${TRAVIS_PULL_REQUEST}-${TRAVIS_COMMIT}"; fi;
        # Bootstrap the build harness, pull test image, and run unit tests.   
        # - make component/pull 
        - make component/test/unit
        # - sonar-scanner --debug
    - stage: test-e2e
      name: "Deploy the image to a cluster and run e2e tests"
      if: type = pull_request
      script:
        #Check out a clusterpool, set up oc, deploy, run e2e tests, and return clusterpool cluster
        - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then export COMPONENT_TAG_EXTENSION="-PR${TRAVIS_PULL_REQUEST}-${TRAVIS_COMMIT}"; fi;
        # - make component/pull 
        - make component/test/e2e
    # - stage: publish
    #   name: "Publish the image to quay with an official version/sha tag and publish entry to integration pipeline stage"
    #   if: type = push AND branch =~ /^release-[0-9]+\..*$/
    #   script:
    #     - make pipeline-manifest/update PIPELINE_MANIFEST_COMPONENT_SHA256=${TRAVIS_COMMIT} PIPELINE_MANIFEST_COMPONENT_REPO=${TRAVIS_REPO_SLUG} PIPELINE_MANIFEST_BRANCH=${TRAVIS_BRANCH}


# matrix:
#   include:
#     # --- Search plugin build/test ---
#   - stage: test-pr
#     name: 'PR tests'
#     if: type = pull_request
#     os: linux
#     dist: trusty
#     language: node_js
#     addons:
#       chrome: stable
#     node_js:
#       - "10"
#     env:
#       - JOBNAME=AMD64 DOCKER_TAG=$(git log -1 --pretty="%aN" | sed 's/[^a-zA-Z0-9]*//g')
#     before_install:
#       - make init
#       - make docker-logins
#     install:
#       - make install
#     before_script:
#       - make copyright-check
#       - make package
#     script:
#       - make integrate-plugin
#       - make run-plugin-tests
#     after_success:
#       - make release
#     after_failure:
#       - make release


# # --- x86 Deploy ---
#   - stage: build
#     name: "Build x86"
#     if: (branch = master) AND (type = push)
#     os: linux
#     language: node_js
#     node_js:
#       - "10"
#     env:
#       - JOBNAME=AMD6
#     before_install:
#       - make init
#     install:
#       - make install
#     script:
#       - make package
#     deploy:
#       provider: script
#       script: "npx semantic-release"
#       skip_cleanup: true
#       on:
#         branch: master
